### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   SaturatingInductor(; name, I_nominal, L_nominal, L_zero, L_inf)

Simple model of an inductor with saturation

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `I_nominal`         | Nominal current                         | A  |   1 |
| `L_nominal`         | Inductance at nominal current                         | H  |   1 |
| `L_zero`         | Inductance near current = 0                         | H  |   2 * L_nominal |
| `L_inf`         | Inductance at large currents                         | H  |   L_nominal / 2 |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         |                          | V  | 
| `i`         |                          | A  | 
| `L_actual`         | Present inductance                         | H  | 
| `psi`         | Present flux                         | Wb  | 
"""
@component function SaturatingInductor(; name, I_nominal=1, L_nominal=1, L_zero=2 * L_nominal, L_inf=L_nominal / 2)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (I_nominal::Float64 = I_nominal), [description = "Nominal current"])
  append!(__params, @parameters (L_nominal::Float64 = L_nominal), [description = "Inductance at nominal current"])
  append!(__params, @parameters (L_zero::Float64 = L_zero), [description = "Inductance near current = 0"])
  append!(__params, @parameters (L_inf::Float64 = L_inf), [description = "Inductance at large currents"])
  append!(__params, @parameters (I_par::Float64 = I_nominal / tan((L_nominal - L_inf) / (L_zero - L_inf))))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)))
  append!(__vars, @variables (L_actual(t)), [description = "Present inductance"])
  append!(__vars, @variables (psi(t)), [description = "Present flux"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  # assert L_zero > L_nominal "L_zero $(L_zero) should be greater than L_nominal $(L_nominal)"
  # assert L_inf < L_nominal "Linf $(Linf) should be less than L_nominal $(L_nominal)"
  push!(__eqs, L_actual ~ L_inf + (L_zero - L_inf) * atan(i / I_par) / (i / I_par))
  push!(__eqs, psi ~ L_inf * i + (L_zero - L_inf) * I_par * atan(i / I_par))
  push!(__eqs, v ~ D(psi))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export SaturatingInductor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(SaturatingInductor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
