### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   OpAmpDetailed(; name, Rdm, Rcm, Cin, Vos, Ib, Ios, vcp, vcm, Avd0, CMRR, fp1, fp2, fp3, fp4, fz, sr_p, sr_m, Rout, Imaxso, Imaxsi, Ts)

Detailed model of an operational amplifier

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `Rdm`         | Input resistance (differential input mode)                         | Ω  |   2000000 |
| `Rcm`         | Input resistance (common mode)                         | Ω  |   2000000000 |
| `Cin`         | Input capacitance                         | F  |   1.4e-12 |
| `Vos`         | Input offset voltage                         | V  |   0.001 |
| `Ib`         | Input bias current                         | A  |   8e-8 |
| `Ios`         | Input offset current                         | A  |   2e-8 |
| `vcp`         | Correction value for limiting by `p_supply`                         | V  |   0 |
| `vcm`         | Correction value for limiting by `n_supply`                         | V  |   0 |
| `Avd0`         | Differential amplifier [dB]                         | dB  |   106 |
| `CMRR`         | Common-mode rejection [dB]                         | dB  |   90 |
| `fp1`         | Dominant pole                         | Hz  |   5 |
| `fp2`         | Pole frequency                         | Hz  |   2000000 |
| `fp3`         | Pole frequency                         | Hz  |   20000000 |
| `fp4`         | Pole frequency                         | Hz  |   100000000 |
| `fz`         | Zero frequency                         | Hz  |   5000000 |
| `sr_p`         | Slew rate for increase                         | V/s  |   500000 |
| `sr_m`         | Slew rate for decrease                         | V/s  |   500000 |
| `Rout`         | Output resistance                         | Ω  |   75 |
| `Imaxso`         | Maximal output current (source current)                         | A  |   0.025 |
| `Imaxsi`         | Maximal output current (sink current)                         | A  |   0.025 |
| `Ts`         | Sampling Time | number of intervals: 2500, stop time: 0.003                         | s  |   0.0000012 |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))
 * `outp` - ([`Pin`](@ref))
 * `p_supply` - ([`Pin`](@ref))
 * `n_supply` - ([`Pin`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v_pos`         |                          | V  | 
| `v_neg`         |                          | V  | 
| `v_vos`         |                          | V  | 
| `v_3`         |                          | V  | 
| `v_in`         |                          | V  | 
| `v_4`         |                          | V  | 
| `i_vos`         |                          | A  | 
| `i_3`         |                          | A  | 
| `i_r2`         |                          | A  | 
| `i_c3`         |                          | A  | 
| `i_4`         |                          | A  | 
| `q_fr1`         |                          | --  | 
| `q_fr2`         |                          | --  | 
| `q_fr3`         |                          | --  | 
| `q_sum`         |                          | V  | 
| `q_sum_help`         |                          | V  | 
| `q_fp1`         |                          | V  | 
| `v_source`         |                          | V  | 
| `x`         | Auxiliary variable for slew rate                         | V  | 
| `v_out`         |                          | V  | 
| `i_out`         |                          | A  | 
"""
@component function OpAmpDetailed(; name, Rdm=2000000, Rcm=2000000000, Cin=1.4e-12, Vos=0.001, Ib=8e-8, Ios=2e-8, vcp=0, vcm=0, Avd0=106, CMRR=90, fp1=5, fp2=2000000, fp3=20000000, fp4=100000000, fz=5000000, sr_p=500000, sr_m=500000, Rout=75, Imaxso=0.025, Imaxsi=0.025, Ts=0.0000012)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Rdm::Float64 = Rdm), [description = "Input resistance (differential input mode)"])
  append!(__params, @parameters (Rcm::Float64 = Rcm), [description = "Input resistance (common mode)"])
  append!(__params, @parameters (Cin::Float64 = Cin), [description = "Input capacitance"])
  append!(__params, @parameters (Vos::Float64 = Vos), [description = "Input offset voltage"])
  append!(__params, @parameters (Ib::Float64 = Ib), [description = "Input bias current"])
  append!(__params, @parameters (Ios::Float64 = Ios), [description = "Input offset current"])
  append!(__params, @parameters (vcp::Float64 = vcp), [description = "Correction value for limiting by `p_supply`"])
  append!(__params, @parameters (vcm::Float64 = vcm), [description = "Correction value for limiting by `n_supply`"])
  append!(__params, @parameters (Avd0::Float64 = Avd0), [description = "Differential amplifier [dB]"])
  append!(__params, @parameters (CMRR::Float64 = CMRR), [description = "Common-mode rejection [dB]"])
  append!(__params, @parameters (fp1::Float64 = fp1), [description = "Dominant pole"])
  append!(__params, @parameters (fp2::Float64 = fp2), [description = "Pole frequency"])
  append!(__params, @parameters (fp3::Float64 = fp3), [description = "Pole frequency"])
  append!(__params, @parameters (fp4::Float64 = fp4), [description = "Pole frequency"])
  append!(__params, @parameters (fz::Float64 = fz), [description = "Zero frequency"])
  append!(__params, @parameters (sr_p::Float64 = sr_p), [description = "Slew rate for increase"])
  append!(__params, @parameters (sr_m::Float64 = sr_m), [description = "Slew rate for decrease"])
  append!(__params, @parameters (Rout::Float64 = Rout), [description = "Output resistance"])
  append!(__params, @parameters (Imaxso::Float64 = Imaxso), [description = "Maximal output current (source current)"])
  append!(__params, @parameters (Imaxsi::Float64 = Imaxsi), [description = "Maximal output current (sink current)"])
  append!(__params, @parameters (Ts::Float64 = Ts), [description = "Sampling Time | number of intervals: 2500, stop time: 0.003"])
  append!(__params, @parameters (vcp_abs::Float64 = abs(vcp)), [description = "Positive correction value for limiting by `p_supply`"])
  append!(__params, @parameters (vcm_abs::Float64 = abs(vcm)), [description = "Positive correction value for limiting by `n_supply`"])
  append!(__params, @parameters (I1::Float64 = Ib + Ios / 2), [description = "Current of internal source I1"])
  append!(__params, @parameters (I2::Float64 = Ib - Ios / 2), [description = "Current of internal source I2"])
  append!(__params, @parameters (Avd0_val::Float64 = 10 ^ (Avd0 / 20)), [description = "Differential mode gain"])
  append!(__params, @parameters (Avcm_val::Float64 = (Avd0_val / (10 ^ (CMRR / 20))) / 2), [description = "Common mode gain"])
  append!(__params, @parameters (sr_p_val::Float64 = abs(sr_p)), [description = "Value of slew rate for increase"])
  append!(__params, @parameters (sr_m_val::Float64 = -abs(sr_m)), [description = "Negative value of slew rate for increase"])
  append!(__params, @parameters (Imaxso_val::Float64 = abs(Imaxso)), [description = "Orientation out outp"])
  append!(__params, @parameters (Imaxsi_val::Float64 = abs(Imaxsi)), [description = "Orientation into outp"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v_pos(t)))
  append!(__vars, @variables (v_neg(t)))
  append!(__vars, @variables (v_vos(t)))
  append!(__vars, @variables (v_3(t)))
  append!(__vars, @variables (v_in(t)))
  append!(__vars, @variables (v_4(t)))
  append!(__vars, @variables (i_vos(t)))
  append!(__vars, @variables (i_3(t)))
  append!(__vars, @variables (i_r2(t)))
  append!(__vars, @variables (i_c3(t)))
  append!(__vars, @variables (i_4(t)))
  append!(__vars, @variables (q_fr1(t)))
  append!(__vars, @variables (q_fr2(t)))
  append!(__vars, @variables (q_fr3(t)))
  append!(__vars, @variables (q_sum(t)))
  append!(__vars, @variables (q_sum_help(t)))
  append!(__vars, @variables (q_fp1(t)))
  append!(__vars, @variables (v_source(t)))
  append!(__vars, @variables (x(t)), [description = "Auxiliary variable for slew rate"])
  append!(__vars, @variables (v_out(t)))
  append!(__vars, @variables (i_out(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())
  push!(__systems, @named outp = __Dyad__Pin())
  push!(__systems, @named p_supply = __Dyad__Pin())
  push!(__systems, @named n_supply = __Dyad__Pin())

  ### Defaults
  __defaults = Dict()
  __defaults[v_source] = (q_fp1)
  __defaults[x] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  # power supply
  push!(__eqs, v_pos ~ p_supply.v)
  push!(__eqs, v_neg ~ n_supply.v)
  # input stage
  push!(__eqs, p.i ~ i_vos)
  push!(__eqs, n.i ~ i_4 - i_r2 - i_c3)
  push!(__eqs, 0 ~ i_3 + i_r2 + i_c3 - i_vos)
  push!(__eqs, p.v - n.v ~ v_vos + v_in)
  push!(__eqs, v_4 ~ n.v)
  push!(__eqs, v_3 ~ p.v - v_vos)
  push!(__eqs, v_vos ~ Vos)
  push!(__eqs, i_3 ~ I1 + v_3 / Rcm)
  push!(__eqs, v_in ~ Rdm * i_r2)
  push!(__eqs, i_c3 ~ Cin * D(v_in))
  push!(__eqs, i_4 ~ I2 + v_4 / Rcm)
  # Frequency response
  push!(__eqs, D(q_fr1) ~ 2 * π * fp2 * (v_in - q_fr1))
  push!(__eqs, q_fr2 + (1 / (2 * π * fp3)) * D(q_fr2) ~ q_fr1 + (1 / (2 * π * fz)) * D(q_fr1))
  push!(__eqs, D(q_fr3) ~ 2 * π * fp4 * (q_fr2 - q_fr3))
  # gain stage
  push!(__eqs, q_sum ~ Avd0_val * q_fr3 + Avcm_val * (v_3 + v_4))
  push!(__eqs, q_sum_help ~ limit_q_sum(q_sum, q_fp1, v_pos, v_neg, vcp_abs, vcm_abs))
  push!(__eqs, D(q_fp1) ~ 2 * π * fp1 * (q_sum_help - q_fp1))
  # slew rate stage
  push!(__eqs, D(x) ~ (q_fp1 - v_source) / Ts)
  push!(__eqs, D(v_source) ~ ifelse(D(x) > sr_p_val, sr_p_val, ifelse(D(x) < sr_m_val, sr_m_val, D(x))))
  # output stage
  push!(__eqs, v_out ~ outp.v)
  push!(__eqs, i_out ~ outp.i)
  push!(__eqs, i_out ~ limit_out_current(v_source, v_out, Rout, Imaxsi_val, Imaxso_val))
  push!(__eqs, p_supply.i ~ 0)
  push!(__eqs, n_supply.i ~ 0)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export OpAmpDetailed

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(OpAmpDetailed)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 200) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(-500 -200) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(0 -500) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(0 500) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
