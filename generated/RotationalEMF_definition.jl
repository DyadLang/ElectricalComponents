### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   RotationalEMF(; name, k)

Electromotoric force (electric/mechanic transformer) | useSupport=true

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `k`         |                          | N.m/A  |    |

## Connectors

 * `p` - ([`Pin`](@ref))
 * `n` - ([`Pin`](@ref))
 * `rotor` - ([`Spline`](@ref))
 * `housing` - ([`Spline`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `v`         | Voltage drop between the two pins                         | V  | 
| `i`         | Current flowing from positive to negative pin                         | A  | 
| `phi`         | Angle of shaft flange with respect to support (= flange.phi - support.phi)                         | rad  | 
| `w`         | Angular velocity of flange relative to support                         | rad/s  | 
| `tau`         | Torque of flange                         | N.m  | 
"""
@component function RotationalEMF(; name, k=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)), [description = "Voltage drop between the two pins"])
  append!(__vars, @variables (i(t)), [description = "Current flowing from positive to negative pin"])
  append!(__vars, @variables (phi(t)), [description = "Angle of shaft flange with respect to support (= flange.phi - support.phi)"])
  append!(__vars, @variables (w(t)), [description = "Angular velocity of flange relative to support"])
  append!(__vars, @variables (tau(t)), [description = "Torque of flange"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = __Dyad__Pin())
  push!(__systems, @named n = __Dyad__Pin())
  push!(__systems, @named rotor = __Dyad__Spline())
  push!(__systems, @named housing = __Dyad__Spline())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, 0 ~ p.i + n.i)
  push!(__eqs, i ~ p.i)
  push!(__eqs, phi ~ rotor.phi - housing.phi)
  push!(__eqs, w ~ D(phi))
  push!(__eqs, k * w ~ v)
  push!(__eqs, tau ~ -k * i)
  push!(__eqs, tau ~ rotor.tau)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export RotationalEMF

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(RotationalEMF)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(0 -500) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(0 500) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
  shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
  <rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="3"
      vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
  <circle cx="500" cy="500" r="500" fill="#00f"/>
</svg></g>
<g  transform="translate(-500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
  <circle cx="500" cy="500" r="500" fill="#00f"/>
</svg></g>
      </svg></div></div>""")
